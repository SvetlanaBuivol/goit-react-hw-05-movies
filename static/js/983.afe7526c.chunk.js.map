{"version":3,"file":"static/js/983.afe7526c.chunk.js","mappings":"wQAEe,SAASA,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACzBC,EAAyBD,EAAzBC,IAAKC,EAAoBF,EAApBE,KAAMC,EAAcH,EAAdG,UACnB,OACE,2BACE,gBACEC,IACEH,EAAG,8DACwDA,G,8vEAG7DI,IAAI,MAEN,wBAAKH,KACL,yBAAG,cAAYC,OAGpB,CCZc,SAASG,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,+FAChBF,GAAW,GADK,mBAISG,EAAAA,EAAAA,IAAgBT,GAJzB,gBAINU,EAJM,EAINA,KACFC,EAAcD,EAAKE,KACvB,kBAA0D,CACxDlB,IADF,EAAGmB,aAEDlB,KAFF,EAAiBmB,cAGflB,UAHF,EAAgCA,UAI9BmB,GAJF,EAA2CC,QAA3C,IAOFZ,EAAUO,GAbI,kDAedM,QAAQC,IAAR,MAfc,yBAiBdZ,GAAW,GAjBG,6EAAH,qDAoBfE,GACD,GAAE,CAACR,KAGF,2BACGK,IAAW,SAACc,EAAA,EAAD,KACZ,wBACGhB,EAAOS,KAAI,SAAAnB,GAAK,OACf,SAACD,EAAD,CAAyBC,MAAOA,GAAjBA,EAAMsB,GADN,QAMxB,C,+LC3CKK,EAAW,gCAEXC,EAAU,CACdC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,UAAaN,EAAb,sBAA2CC,GAF/D,cAEGM,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIC,MAAM,KAAMC,SALnB,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,8FAAiCC,EAAjC,EAAiCA,MAAjC,kBAEoBN,EAAAA,EAAAA,IAAA,UAAaN,EAAb,8BAA2CY,GAASX,GAFxE,cAEGM,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIC,MAAM,KAAMC,SALnB,gFASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlB,GAA/B,gGAEwBW,EAAAA,EAAAA,IAAA,UAAaN,EAAb,iBAA8BL,GAAMM,GAF5D,cAEOM,EAFP,yBAGQA,EAASC,MAHjB,sCAKO,IAAIC,MAAM,KAAMK,SALvB,gFASA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BM,GAA/B,gGAEwBW,EAAAA,EAAAA,IAAA,UAAaN,EAAb,iBAA8BL,EAA9B,YAA4CM,GAFpE,cAEOM,EAFP,yBAGQA,EAASC,MAHjB,sCAKO,IAAIC,MAAM,KAAMK,SALvB,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BpB,GAA/B,gGAEwBW,EAAAA,EAAAA,IAAA,UAAaN,EAAb,iBAA8BL,EAA9B,YAA4CM,GAFpE,cAEOM,EAFP,yBAGQA,EAASC,MAHjB,sCAKO,IAAIC,MAAM,KAAMK,SALvB,gF","sources":["components/CastItem/CastItem.jsx","components/Cast/Cast.jsx","services/movieAPI.js"],"sourcesContent":["import imgDefault from '../../imgDefault/imgDefault.jpg';\n\nexport default function CastItem({ actor }) {\n  const { img, name, character } = actor;\n  return (\n    <li>\n      <img\n        src={\n          img\n            ? `https://www.themoviedb.org/t/p/w600_and_h900_bestv2/${img}`\n            : imgDefault\n        }\n        alt=\"\"\n      />\n      <h3>{name}</h3>\n      <p>Character: {character}</p>\n    </li>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/movieAPI';\nimport Loader from 'components/Loader/Loader';\nimport CastItem from 'components/CastItem/CastItem';\n\nexport default function CastList() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const { cast } = await getMovieCredits(movieId);\n        const actorsArray = cast.map(\n          ({ profile_path, original_name, character, cast_id }) => ({\n            img: profile_path,\n            name: original_name,\n            character: character,\n            id: cast_id,\n          })\n        );\n        setActors(actorsArray);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <ul>\n        {actors.map(actor => (\n          <CastItem key={actor.id} actor={actor} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst options = {\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNjhiYWRjMjMwODgzZjkwODc3ZjA0YjkzMzg4YzE2MiIsInN1YiI6IjY0YzEzZDIyMmYxYmUwMDEyZDkxM2M2ZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.87kGy0m8LKwU7rLB9Fu-QG9F6jP_TM1w6fEawWTAL5U',\n  },\n};\n\nexport async function getTrendingMovies() {\n    try {\n    const response = await axios.get(`${BASE_URL}trending/movie/day`, options);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nexport async function getMovieByQuery({ query }) {\n  try {\n    const response = await axios.get(`${BASE_URL}search/movie?query=${query}`, options);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n}\n\nexport async function getMovieDetails(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}movie/${id}`, options)\n        return response.data;\n    } catch (error) {\n        throw new Error(error.massage);\n    }\n}\n\nexport async function getMovieCredits(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}movie/${id}/credits`, options)\n        return response.data;\n    } catch (error) {\n        throw new Error(error.massage);\n    }\n}\n\nexport async function getMovieReviews(id) {\n    try {\n        const response = await axios.get(`${BASE_URL}movie/${id}/reviews`, options)\n        return response.data;\n    } catch (error) {\n        throw new Error(error.massage);\n    }\n}"],"names":["CastItem","actor","img","name","character","src","alt","CastList","movieId","useParams","useState","actors","setActors","loading","setLoading","useEffect","fetchData","getMovieCredits","cast","actorsArray","map","profile_path","original_name","id","cast_id","console","log","Loader","BASE_URL","options","headers","accept","Authorization","getTrendingMovies","axios","response","data","Error","message","getMovieByQuery","query","getMovieDetails","massage","getMovieReviews"],"sourceRoot":""}